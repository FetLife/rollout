= rollout

Feature flippers.

== Install it

  Add this line to your application's Gemfile:

  gem 'rollout'

  And then execute:

  $ bundle

  Or install it yourself with:

  $ gem install rollout

== How it works

Initialize a rollout object. I assign it to a global var.

  $redis   = Redis.new
  $rollout = Rollout.new($redis)

Check whether a feature is active for a particular user:
  
  $rollout.enabled?(:chat, User.first) # => true/false

or

  $rollout[:chat].enabled? User.first # => true/false

Check whether a feature is active globally:

  $rollout[:chat].enabled?

You can activate features using a number of different mechanisms.

== Context

The Rollout::Context hooks rollout into your web framework.

  class WebContext < Rollout::Context
    delegate :session, :params, :current_user, to: :controller

    def uaid
      session[:visitor_id]
    end

    def user_id
      current_user && current_user.id || uaid
    end

    def user_name
      current_user && current_user.email
    end

    def admin?
      current_user && current_user.admin?
    end

    def features
      params[:features]
    end

    def in_group?(user_id, groups)
      user = User.find(user_id)
      # loop thru enabled groups, check if user is part of one
      ret = false
      groups.each do |group|
        ret = user.in_group?(group)
        break if ret == true
      end
      ret
    end

    def internal_request
      # check request if from a local ip addr
      false
    end
  end


== Variants

  $rollout.set(:background) {|f| f.variants = { red: 33, blue: 33, green: 33} }

Override variant via URL

  http://carwoo.com/?features=background:green

If you have multiple features to test, use commas to separate the features. For example, if you had features "background", "color", and "size" the url would look like this:

  http://carwoo.com/?features=background:green,color:orange,size:really_big

== Groups

Rollout ships with one group by default: "all", which does exactly what it sounds like. 

You can activate the all group for the chat feature like this:

  $rollout.activate_group(:chat, :all)

You might also want to define your own groups. We have one for our caretakers:

  $rollout.define_group(:caretakers) do |user|
    user.caretaker?
  end

You can activate multiple groups per feature.

Deactivate groups like this:

  $rollout.deactivate_group(:chat, :all)

== Specific Users

You might want to let a specific user into a beta test or something. If that user isn't part of an existing group, you can let them in specifically:
  
  $rollout.activate_user(:chat, @user)

Deactivate them like this:

  $rollout.deactivate_user(:chat, @user)

== User Percentages

If you're rolling out a new feature, you might want to test the waters by slowly enabling it for a percentage of your users.

  $rollout.activate_percentage(:chat, 20)

The algorithm for determining which users get let in is this:

  user.id % 10 < percentage / 10

So, for 20%, users 0, 1, 10, 11, 20, 21, etc would be allowed in. Those users would remain in as the percentage increases.

Deactivate all percentages like this:

  $rollout.deactivate_percentage(:chat)

_Note that activating a feature for 100% of users will also make it active "globally". That is when calling Rollout#active? without a user object._

== Feature is broken

Deactivate everybody at once:

  $rollout.deactivate(:chat)

For many of our features, we keep track of error rates using redis, and deactivate them automatically when a threshold is reached to prevent service failures from cascading. See http://github.com/jamesgolick/degrade for the failure detection code.

== Namespacing

Rollout separates its keys from other keys in the data store using the "feature" keyspace.

If you're using redis, you can namespace keys further to support multiple environments by using the http://github.com/defunkt/redis-namespace gem.

  $ns = Redis::Namespace.new(Rails.env, :redis => $redis)
  $rollout = Rollout.new($ns)
  $rollout.activate_group(:chat, :all)
  
This example would use the "development:feature:chat:groups" key.

== misc/check_rollout.rb

In our infrastructure, rollout obviously allows us to progressively enable new features but we also use it to automatically disable features and services that break or fail to prevent them from causing cascading failures and wiping out our entire system.

When a feature reaches "maturity" - in other words, expected to be at 100% rollout all the time - we use check_rollout.rb to setup nagios alerts on the rollouts so that we get paged if one of them gets disabled.


== Implementations in other languages

* Python: http://github.com/asenchi/proclaim

== Copyright

Copyright (c) 2010 James Golick, BitLove, Inc. See LICENSE for details.
